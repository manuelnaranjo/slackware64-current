--- libarchive/archive.h.old	2014-10-27 08:30:30.031884763 +0100
+++ libarchive/archive.h	2014-10-27 08:30:33.721884875 +0100
@@ -1037,4 +1037,23 @@
 /* #undef __LA_INT64_T */
 /* #undef __LA_SSIZE_T */
 
+/* Take advantage of static_assert/_Static_assert to make sure libarchive is
+ * not built and is not used with a "struct stat" that isn't 64bits.
+ * On Windows I had "stat" #define'd to "stat64" but libarchive #undef'ed it in
+ * its private headers; I then built a program that used libarchive and didn't
+ * have that #undef and got ABI issues: libarchive was storing a 32bit offset
+ * in a "struct stat" but the caller was expecting a 64bit one.
+ * This is a best effort check but which should cover most uses. */
+#ifdef __cplusplus
+#if (__cplusplus >= 201103L)
+static_assert(sizeof(struct stat) == sizeof(struct stat64), "Not using largefile support");
+#endif
+#else
+#if ((defined(__STDC_VERSION) && __STDC_VERSION >= 201112L) \
+    || (defined(__GNUC__) && (__GNUC__ >= 4) && (__GNUC_MINOR__ >= 6)) \
+    || (defined(__clang__) && (__clang_major__ >= 3) && (__clang_minor__ >= 4)))
+_Static_assert(sizeof(struct stat) == sizeof(struct stat64), "Not using largefile support");
+#endif
+#endif
+
 #endif /* !ARCHIVE_H_INCLUDED */
